import Head from "next/head";
import Image from "next/image";
import {
  Button,
  Card,
  Code,
  Display,
  Divider,
  Fieldset,
  Grid,
  Input,
  Link,
  Page,
  Spacer,
  Table,
  Text,
  useToasts,
} from "@geist-ui/core";
import { useEffect, useRef, useState } from "react";

import moment from "moment";
import "moment/locale/de";
import { useSessionContext } from "@supabase/auth-helpers-react";
import { useRouter } from "next/router";
import { withPageAuth } from "@supabase/auth-helpers-nextjs";
import { PickResult } from "../lib/peoplePicker";
import { PickerResult } from "./api/picker";

const currentDate = new Date();

export const getServerSideProps = withPageAuth({ redirectTo: "/" });

const Dashboard = () => {
  const [timeUntil, setTimeUntil] = useState<string | undefined>();
  const [pickResult, setPickResult] = useState<PickerResult | undefined>();
  const { supabaseClient } = useSessionContext();

  const [wishes, setWishes] = useState<any[]>([]);
  const { setToast } = useToasts();
  const wishItem = useRef<HTMLInputElement>();
  const wishLink = useRef<HTMLInputElement>();

  useEffect(() => {
    moment.locale("de");
    setTimeUntil(
      moment(new Date(currentDate.getFullYear(), 12, 25)).fromNow(true)
    );

    fetch("/api/picker", {
      credentials: "same-origin",
    })
      .then((res) => res.json())
      .then((resPickResult) => setPickResult(resPickResult));

    supabaseClient
      .from("wishes")
      .select()
      .then((res) => {
        if (res.data) {
          setWishes(res.data);
        }
      });

    supabaseClient
      .channel("public:wishes")
      .on(
        "postgres_changes",
        { event: "*", schema: "public", table: "wishes" },
        (payload) => {
          if (payload.eventType === "INSERT") {
            setWishes((wishes) => [...wishes, payload.new]);
          }

          if (payload.eventType === "DELETE") {
            setWishes((wishes) => [
              ...wishes.filter((wish) => wish.id !== (payload.old as any).id),
            ]);
          }
        }
      )
      .subscribe();
  }, []);

  return (
    <Page dotBackdrop width={"100vw"}>
      <Head>
        <title>Wichtel-o-Mat - Dashboard ‚ú®</title>
        <meta name="description" content="Generated by create next app" />
        <link
          rel="icon"
          href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>üéÖ</text></svg>"
        />
      </Head>
      <Grid.Container alignItems={"center"} justify={"center"} height={"100%"}>
        <Grid
          xs={24}
          sm={24}
          md={12}
          xl={24}
          alignItems={"center"}
          justify={"center"}
        >
          <Card padding={0}>
            <div
              style={{
                padding: "10px",
                display: "flex",
                alignContent: "center",
                justifyContent: "center",
              }}
            >
              <Image
                src={"/wichtel.svg"}
                width={"400px"}
                height={"200px"}
                draggable={false}
              />
            </div>
            <Card.Content>
              <Text h3>
                Willkommen zur√ºck, {pickResult?.person} &mdash;
                <br /> nur noch {timeUntil} verbleiben!
              </Text>
            </Card.Content>
            <Divider w={"100%"} />
            <Card.Content>
              <Display>
                <Text h3>
                  &rdquo;{pickResult?.pickedPerson || "l√§dt ..."}&rdquo;
                </Text>
                <Text em>Der Wunschzettel:</Text>
                <ul>
                  {pickResult?.wishes.length === 0
                    ? "ist leer"
                    : pickResult?.wishes.map(({ wish, link }) => (
                        <li>
                          <Link
                            color
                            href={link}
                            target={"_blank"}
                            rel={"noopener noreferrer"}
                          >
                            {wish}
                          </Link>
                        </li>
                      ))}
                </ul>
              </Display>
            </Card.Content>
            <Divider w={"100%"} margin={0} padding={0} />
            <Card.Content>
              Spiel Regeln f√ºr unsere Geschenke:
              <ul>
                <li>
                  W√ºnsche m√ºssen bis zum{" "}
                  <Text b>01.12.{currentDate.getFullYear()}</Text> eingereicht
                  werden
                </li>
                <li>
                  Ein Geschenke sollten
                  <Text b>
                    einen emotionalen Mehrwert oder generellen Alltagsnutzen
                    haben
                  </Text>
                </li>
                <li>
                  Geschenke <Text b>bis zu</Text> einem Warenwert von 50‚Ç¨ sind
                  erw√ºnscht
                </li>
              </ul>
            </Card.Content>
            <Divider w={"100%"} margin={0} padding={0} />
            <Card.Content>
              <Text p b marginBottom={"15px"}>
                Zeit deine W√ºnsche zu hinterlegen f√ºr dein flei√üigen Helfer!
              </Text>
              <form
                onSubmit={async (event) => {
                  event.stopPropagation();
                  event.preventDefault();

                  if (!wishItem.current!.value || !wishLink.current!.value) {
                    setToast({
                      text: "Bitte f√ºlle deinen Wunsch und einen Link aus.",
                      type: "error",
                    });
                    return;
                  }

                  const { data } = await supabaseClient.auth.getUser();

                  await supabaseClient.from("wishes").insert({
                    wish: wishItem.current!.value,
                    link: wishLink.current!.value,
                    userid: data.user!.id,
                  });

                  wishItem.current!.value = "";
                  wishLink.current!.value = "";
                }}
              >
                <Grid.Container gap={2}>
                  <Grid xs={12}>
                    <Input
                      ref={wishItem as any}
                      placeholder={"Wunsch Gegenstand"}
                      width={"100%"}
                    />
                  </Grid>
                  <Grid xs={12} justify={"flex-end"}>
                    <Input
                      ref={wishLink as any}
                      placeholder={"Link/Verwei√ü"}
                      width={"100%"}
                    />
                  </Grid>
                  <Grid xs={12}>
                    <Spacer />
                  </Grid>
                  <Grid xs={12} justify={"flex-end"}>
                    <Button
                      auto
                      scale={1 / 3}
                      font="12px"
                      htmlType={"submit"}
                      type={"success-light"}
                    >
                      Hinzuf√ºgen
                    </Button>
                  </Grid>
                </Grid.Container>
              </form>
            </Card.Content>
            <Divider w={"100%"} margin={0} padding={0} />
            <Card.Content>
              <Text p b marginBottom={"15px"}>
                Hinterlegte W√ºnsche
              </Text>
              <Table data={wishes}>
                <Table.Column prop="wish" label="Wunsch" />
                <Table.Column
                  prop="link"
                  label="Link"
                  render={(value) => (
                    <Link
                      style={{
                        textOverflow: "ellipsis",
                        overflow: "hidden",
                        whiteSpace: "nowrap",
                      }}
                      width={"100%"}
                      href={value}
                      color
                      target={"_blank"}
                      rel={"noopener noreferrer"}
                    >
                      Kauf-Link
                    </Link>
                  )}
                />
                <Table.Column
                  prop="undefined"
                  label="Operationen"
                  render={(value, rowData) => {
                    return (
                      <Button
                        type="error"
                        auto
                        scale={1 / 3}
                        font="12px"
                        onClick={async () => {
                          await supabaseClient
                            .from("wishes")
                            .delete()
                            .eq("id", (rowData as any).id);
                        }}
                      >
                        Remove
                      </Button>
                    );
                  }}
                />
              </Table>
            </Card.Content>
            <Fieldset.Footer>
              <Spacer inline />
              <Button
                auto
                scale={1 / 3}
                font="12px"
                htmlType="submit"
                type={"warning"}
              >
                Logout
              </Button>
            </Fieldset.Footer>
          </Card>
        </Grid>
      </Grid.Container>
    </Page>
  );
};

export default Dashboard;
